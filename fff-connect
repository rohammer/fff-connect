#!/bin/bash

# connect a fff hoot specified by $1

if [ "$1" = "" ] ; then
	echo "usage: fff-connect [show|disconnect|Hoodname] [default]"
	echo "show all Hoods"
	echo "disconnect: kill old connections"
	echo "default: set the default ipv4 route and dns to fff  "
	exit
fi

case $1 in
show*)
	#show-hoods
	curl -s "http://keyserver.freifunk-franken.de/v2/hoods.php"  
;;

d*)
	# disconnect
	echo "kill old connections"
	killall fastd &>/dev/null
	ip l del bat0 &>/dev/null
	dhclient -r bat0
	dhclient -v  
	ip ru | grep 3275 | ip ru del pref 32765
;;


*)
	#connect
	# first kill old connections 
	$0 d
	# get some vars
	hood=$1
	lat=$(curl -s "http://keyserver.freifunk-franken.de/v2/hoods.php" | jq -c  '.[] | select(.name | contains("'$hood'")) | .lat')
	long=$(curl -s "http://keyserver.freifunk-franken.de/v2/hoods.php" | jq -c  '.[] | select(.name | contains("'$hood'")) | .lon')
	hoodfile=$(curl -s "http://keyserver.freifunk-franken.de/v2/?lat=$lat&long=$long")
	addr=$(echo $hoodfile | jq -r '.vpn[0].address')
	port=$(echo $hoodfile | jq -r '.vpn[0].port')
	key=$(echo $hoodfile | jq -r '.vpn[0].key')

	# write config
	[ -d /run/fastd ] || mkdir /run/fastd
	config="/run/fastd/fastd.conf"
	peer="/run/fastd/peer"

	echo 'interface "fastd";' > $config
	echo 'method "null";' >> $config
	echo 'secret "'$(fastd --generate-key 2>/dev/null | grep Secret | cut -f2 -d" ")\"\; >> $config
	echo "mtu 1426;" >> $config
	echo "secure handshakes no;" >> $config
	echo 'include peer "'$peer\"\; >> $config

	echo 'key "'$key\"\; > $peer
	echo 'remote "'$addr\"" port $port;" >>$peer

	# start fastd
	fastd -d -c $config 2>/dev/null
	sleep 1
	ip l s dev fastd up
	batctl if add fastd
	ip l s dev bat0 up
	if [ "$2" = "default" ] ; then
		# Ip and routing
		# create dhclient-script
    	dhclientscript="/dev/shm/dhclient-script"

		cat > $dhclientscript <<'EOF'
#!/bin/bash

# update /etc/resolv.conf based on received values
make_resolv_conf() {
    local new_resolv_conf

    # DHCPv4
    if [ -n "$new_domain_search" ] || [ -n "$new_domain_name" ] ||
       [ -n "$new_domain_name_servers" ]; then
        resolv_conf=$(readlink -f "/etc/resolv.conf" 2>/dev/null) ||
            resolv_conf="/etc/resolv.conf"

        new_resolv_conf="${resolv_conf}.dhclient-new.$$"
        wait_for_rw "$new_resolv_conf"
        rm -f $new_resolv_conf

        if [ -n "$new_domain_name" ]; then
            echo domain ${new_domain_name%% *} >>$new_resolv_conf
        fi

        if [ -n "$new_domain_search" ]; then
            if [ -n "$new_domain_name" ]; then
                domain_in_search_list=""
                for domain in $new_domain_search; do
                    if [ "$domain" = "${new_domain_name}" ] ||
                       [ "$domain" = "${new_domain_name}." ]; then
                        domain_in_search_list="Yes"
                    fi
                done
                if [ -z "$domain_in_search_list" ]; then
                    new_domain_search="$new_domain_name $new_domain_search"
                fi
            fi
            echo "search ${new_domain_search}" >> $new_resolv_conf
        elif [ -n "$new_domain_name" ]; then
            echo "search ${new_domain_name}" >> $new_resolv_conf
        fi

        if [ -n "$new_domain_name_servers" ]; then
            for nameserver in $new_domain_name_servers; do
                echo nameserver $nameserver >>$new_resolv_conf
            done
        else # keep 'old' nameservers
            sed -n /^\w*[Nn][Aa][Mm][Ee][Ss][Ee][Rr][Vv][Ee][Rr]/p $resolv_conf >>$new_resolv_conf
        fi

        if [ -f $resolv_conf ]; then
            chown --reference=$resolv_conf $new_resolv_conf
            chmod --reference=$resolv_conf $new_resolv_conf
        fi
        mv -f $new_resolv_conf $resolv_conf
    # DHCPv6
    elif [ -n "$new_dhcp6_domain_search" ] || [ -n "$new_dhcp6_name_servers" ]; then
        resolv_conf=$(readlink -f "/etc/resolv.conf" 2>/dev/null) ||
            resolv_conf="/etc/resolv.conf"

        new_resolv_conf="${resolv_conf}.dhclient-new.$$"
        wait_for_rw "$new_resolv_conf"
        rm -f $new_resolv_conf

        if [ -n "$new_dhcp6_domain_search" ]; then
            echo "search ${new_dhcp6_domain_search}" >> $new_resolv_conf
        fi

        if [ -n "$new_dhcp6_name_servers" ]; then
            for nameserver in $new_dhcp6_name_servers; do
                # append %interface to link-local-address nameservers
                if [ "${nameserver##fe80::}" != "$nameserver" ] ||
                   [ "${nameserver##FE80::}" != "$nameserver" ]; then
                    nameserver="${nameserver}%${interface}"
                fi
                echo nameserver $nameserver >>$new_resolv_conf
            done
        else # keep 'old' nameservers
            sed -n /^\w*[Nn][Aa][Mm][Ee][Ss][Ee][Rr][Vv][Ee][Rr]/p $resolv_conf >>$new_resolv_conf
        fi

        if [ -f $resolv_conf ]; then
            chown --reference=$resolv_conf $new_resolv_conf
            chmod --reference=$resolv_conf $new_resolv_conf
        fi
        mv -f $new_resolv_conf $resolv_conf
    fi
}

case "$reason" in

BOUND|RENEW|REBIND|REBOOT)

        if [ -n "$old_ip_address" ] && [ -n "$alias_ip_address" ] &&
           [ "$alias_ip_address" != "$old_ip_address" ]; then
            # alias IP may have changed => flush it
            ip -4 addr flush dev ${interface} label ${interface}:0
        fi

        if [ -n "$old_ip_address" ] &&
           [ "$old_ip_address" != "$new_ip_address" ]; then
            # leased IP has changed => flush it
            ip -4 addr flush dev ${interface} label ${interface}
        fi

        if [ -z "$old_ip_address" ] ||
           [ "$old_ip_address" != "$new_ip_address" ] ||
           [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ]; then
            # new IP has been leased or leased IP changed => set it
            ip -4 addr add ${new_ip_address}${new_subnet_mask:+/$new_subnet_mask} \
                ${new_broadcast_address:+broadcast $new_broadcast_address} \
                dev ${interface} label ${interface}

            if [ -n "$new_interface_mtu" ]; then
                # set MTU
                ip link set dev ${interface} mtu ${new_interface_mtu}
            fi

            # if we have $new_rfc3442_classless_static_routes then we have to
            # ignore $new_routers entirely
            if [ ! "$new_rfc3442_classless_static_routes" ]; then
                    # set if_metric if IF_METRIC is set or there's more than one router
                    if_metric="$IF_METRIC"
                    if [ "${new_routers%% *}" != "${new_routers}" ]; then
                        if_metric=${if_metric:-1}
                    fi

            fi
        fi

        if [ -n "$alias_ip_address" ] &&
           [ "$new_ip_address" != "$alias_ip_address" ]; then
            # separate alias IP given, which may have changed
            # => flush it, set it & add host route to it
            ip -4 addr flush dev ${interface} label ${interface}:0
            ip -4 addr add ${alias_ip_address}${alias_subnet_mask:+/$alias_subnet_mask} \
                dev ${interface} label ${interface}:0
            ip -4 route add ${alias_ip_address} dev ${interface} table 111 #>/dev/null 2>&1
        fi
        # set default route
		for router in $new_routers; do
        	ip -4 route add default via ${router} dev ${interface} \
        	${if_metric:+metric $if_metric} table 111 # >/dev/null 2>&1
		done

		make_resolv_conf

        ;;
esac
EOF
		chmod 755 $dhclientscript
		sleep 2
		dhclient -v -sf $dhclientscript bat0
		
		# and set the rule
		ip ru add not to $addr table 111


	fi
;;
esac
